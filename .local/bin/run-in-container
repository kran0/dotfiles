#!/bin/sh -e

# USAGE: ln -s run-in-container <tool>
# And run tool after that as

# ENVIRONMENT:
#  PODMAN=podman|docker|etc - command-line tool for managing containers
#  PODMAN_RUN_ARGS - any args for podman run command

# Set tool name
case "${0##*/}" in # basename $0, removing all before /
 'run-in-container' ) readonly __TOOLNAME="${1}"; shift ;;
 *                  ) readonly __TOOLNAME="${0##*/}" ;;
esac

# Set basic run 'alias-style commandlines'
readonly\
 _CONTAINER_RUN_TINY="${PODMAN:-podman} run ${PODMAN_RUN_ARGS:--i --rm} docker.io/kran0/tiny:"\
 _CONTAINER_RUN_BUSYBOX="${PODMAN:-podman} run ${PODMAN_RUN_ARGS:--i --rm} docker.io/library/busybox:latest "\
 _CONTAINER_RUN_COMMON="${PODMAN:-podman} run ${PODMAN_RUN_ARGS:--i --rm} "

__is_local_image(){
 ${PODMAN:-podman} images --format='{{.Repository}}:{{.Tag}}' | grep -q "${1}$" && return 0
 return ${?:-1}
}
_is_common_image(){ # Find image in registries
 __is_local_image "docker.io/kran0/tiny:${1}" && return 0
 ${PODMAN:-podman} manifest inspect "${1}" 2>/dev/null >/dev/null && return 0
## Commented out because it is not working
# if [[ ${1} '==' docker.io/* ]] || [[ ${1} '==' ghcr.io/* ]]
# then
#  __is_local_image "${1}" && return 0
# fi
 return ${?:-1}
}

_tinyimages_has() { # Find image in kran0/tiny
 __is_local_image "docker.io/kran0/tiny:${1}" && return 0
 _is_common_image "docker.io/kran0/tiny:${1}" && return 0
 return ${?:-1}
}

_busybox_has() { # Find tool in busybox
 local PODMAN_RUN_ARGS=
 ${_CONTAINER_RUN_BUSYBOX} busybox | ${CONTAINER_RUN_BUSYBOX} grep -Eoq "[[:space:]](${1})([,]|$)"
 return ${?:-1}
}

# Try to exec tool
_tinyimages_has ${__TOOLNAME}  && exec ${_CONTAINER_RUN_TINY}${__TOOLNAME} "${@}" # no space here!
_busybox_has ${__TOOLNAME}     && exec ${_CONTAINER_RUN_BUSYBOX} ${__TOOLNAME} "${@}"
_is_common_image ${__TOOLNAME} && exec ${_CONTAINER_RUN_COMMON} ${__TOOLNAME} "${@}"

# If nothing helped, try to build and exec tool
# Imspired by: https://github.com/kran0/tinyimages/blob/master/Dockerfile-alpine
readonly CONTAINEREMPFILE=$(mktemp)
cat > "${CONTAINEREMPFILE}" << Containerfile

# containerfile-build-run directives
# IMAGE_NAME=tinybuild:${__TOOLNAME}
# SKIP_TESTS=true
# START_ARGUMENTS=${PODMAN_RUN_ARGS:--i --rm}

FROM alpine:edge as apkextractor

ADD https://raw.githubusercontent.com/kran0/tinyimages/master/apkextractor.sh /
RUN ash /apkextractor.sh ${__TOOLNAME}

FROM scratch
COPY --from=apkextractor /target /
ENTRYPOINT [ "/usr/bin/${__TOOLNAME}" ]
Containerfile

DELETE_CONTAINERFILE_AFTER_BUILD="${CONTAINEREMPFILE}" exec container-build-run "${CONTAINEREMPFILE}" "${@}"
